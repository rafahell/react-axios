{"version":3,"sources":["Loading.js","pin.js","App.js","serviceWorker.js","index.js"],"names":["Loading","_ref","message","react_default","a","createElement","pinStyle","cursor","fill","stroke","Pin","_this$props","this","props","_this$props$size","size","onClick","height","viewBox","style","Object","objectSpread","transform","concat","d","PureComponent","navStyle","position","top","left","padding","App","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","_updateViewport","viewport","setState","state","isLoaded","searchTerm","latitude","longitude","zoom","bearing","pitch","popupInfo","searchValue","bind","assertThisInitialized","_this2","axios","get","then","res","users","data","results","getUsers","e","target","value","_this3","city","location","esm","tipSize","anchor","Number","coordinates","closeOnClick","onClose","_this4","_this$state","className","Container","Row","Col","xs","md","Card","Body","type","placeholder","onChange","filter","item","name","first","toLowerCase","includes","isSearched","map","user","sm","key","id","Img","variant","src","picture","large","Title","Text","cell","email","assign","width","mapStyle","mapboxApiAccessToken","pin_Pin","_renderPopup","onViewportChange","src_Loading","Component","Boolean","window","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0a0be49d.chunk.js","sourcesContent":["import React from 'react';\n\nconst Loading = ({message}) => <h2>{message}</h2>\n\nexport default Loading;","import React, {PureComponent} from 'react';\n\nconst ICON = `M20.2,15.7L20.2,15.7c1.1-1.6,1.8-3.6,1.8-5.7c0-5.6-4.5-10-10-10S2,4.5,2,10c0,2,0.6,3.9,1.6,5.4c0,0.1,0.1,0.2,0.2,0.3\n  c0,0,0.1,0.1,0.1,0.2c0.2,0.3,0.4,0.6,0.7,0.9c2.6,3.1,7.4,7.6,7.4,7.6s4.8-4.5,7.4-7.5c0.2-0.3,0.5-0.6,0.7-0.9\n  C20.1,15.8,20.2,15.8,20.2,15.7z`;\n\nconst pinStyle = {\n  cursor: 'pointer',\n  fill: '#d00',\n  stroke: 'none'\n};\n\nexport default class Pin extends PureComponent {\n\n  render() {\n    const {size = 20, onClick} = this.props;\n\n    return (\n      <svg \n        height={size}\n        viewBox=\"0 0 24 24\"\n        style={{...pinStyle, transform: `translate(${-size / 2}px,${-size}px)`}}\n        onClick={onClick}\n      >\n        <path d={ICON}/>\n      </svg>\n    );\n  }\n}","import React, { Component } from 'react';\nimport {Card, Container, Row, Col} from 'react-bootstrap';\nimport MapGL, {Marker,Popup, NavigationControl} from 'react-map-gl';\nimport axios from 'axios';\nimport Loading from './Loading';\nimport './App.css';\nimport Pin from './pin';\n\nconst TOKEN = 'pk.eyJ1IjoicmFmYWhlbGwiLCJhIjoiY2pzMzJ1MnZ2MjQxYjQ0bHh4amQyczJyMSJ9.-iEWBE9bMBsJvf5uUtFiAw';\nconst navStyle = {\n  position: 'absolute',\n  top: 0,\n  left: 0,\n  padding: '10px'\n};\n\nfunction isSearched(searchTerm) {\n  return function(item) {\n    return !searchTerm || item.name.first.toLowerCase().includes(searchTerm.toLowerCase());\n  }\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    \n    this.state = {\n      isLoaded: false,\n      searchTerm: '',\n      viewport: {\n        latitude: 37.785164,\n        longitude: -100,\n        zoom: 2,\n        bearing: 0,\n        pitch: 0\n      },\n      popupInfo: null\n    };\n    // this.handleSubmit = this.handleSubmit.bind(this);\n    this.searchValue = this.searchValue.bind(this);\n    \n  }\n  \n  \n  //fetch api axios\n  getUsers() {\n    axios.get('https://randomuser.me/api/?nat=US&results=6')\n      .then(res => {\n        const users = res.data.results;\n        this.setState({ \n          users,\n          isLoaded: true \n        })\n      })\n\n    this.setState({\n      isLoaded: false\n    })\n  }\n\n  // handleSubmit(e) {\n  //   e.preventDefault();\n  //   this.getUsers();\n  // }\n\n  componentDidMount() {\n   this.getUsers(); \n  }\n\n  searchValue (e) {\n    this.setState ({searchTerm: e.target.value})\n  }\n\n\n\n  _updateViewport = (viewport) => {\n    this.setState({viewport});\n  }\n\n\n  _renderPopup(e) {\n    \n    const {popupInfo} = this.state;\n    const city = e.location.city;\n    \n    \n    return popupInfo && (\n      <Popup tipSize={5}\n        anchor=\"top\"\n        longitude={Number(e.location.coordinates.longitude)}\n        latitude={Number(e.location.coordinates.latitude)}\n        closeOnClick={false}\n        onClose={() => this.setState({popupInfo: null})} >\n        <p>{city}</p>\n      </Popup>\n    );\n  }\n\n\n  render() {\n    const {isLoaded, users, searchTerm, viewport} = this.state;\n\n      return (\n        <div className=\"App\">\n\n       <Container>\n          <Row className=\"justify-content-center\">\n            <Col xs={12} md={12}>\n              <form className=\"card card-sm\">\n              <Card>\n                  <Card.Body className=\" row no-gutters align-items-center\">\n                        <Col md=\"auto\">\n                            <i className=\"fas fa-search h4 text-body\"></i>\n                        </Col>\n                        <Col>\n                          <input className=\"form-control form-control-lg form-control-borderless\" type=\"search\" placeholder=\"Search\" onChange={this.searchValue} />\n                        </Col>\n                  </Card.Body>\n                </Card>\n              </form>\n            </Col>\n        </Row>\n      </Container>\n              \n\n          {isLoaded ?\n            <Container>\n              <Row>\n              {users.filter(isSearched(searchTerm)).map((user) => \n                  <Col xs={12} sm={12} md={6} key={user.id.value}>\n                  <Card>\n                      <Card.Img variant=\"top\" src={user.picture.large} />\n                      <Card.Body>\n                        <Card.Title>{user.name.first}</Card.Title>\n                        <Card.Text>\n                          <i className=\"fas fa-phone\"></i> {user.cell} <br/>\n                          <i className=\"far fa-envelope\"></i> <span className=\"small\">{user.email}</span><br/>\n                          <i className=\"fas fa-map-marker-alt\"></i><span className=\"city\"> {user.location.city}</span>\n                        </Card.Text>\n\n                        <MapGL \n                          {...viewport}\n                          width=\"100%\"\n                          height=\"400px\"\n                          mapStyle=\"mapbox://styles/mapbox/dark-v9\"\n                          //onViewportChange={this._updateViewport}\n                          mapboxApiAccessToken={TOKEN} >\n                          \n                          <Marker \n                            longitude={Number(user.location.coordinates.longitude)}\n                            latitude={Number(user.location.coordinates.latitude)}\n                            // offsetTop={-20}\n                            // offsetLeft={-10}\n                            >\n                            <Pin size={20} onClick={() => this.setState({popupInfo: user })}/>\n                          </Marker>\n                           {this._renderPopup(user)}\n                          <div className=\"nav\" style={navStyle}>\n                            <NavigationControl  onViewportChange={(viewport) => this.setState({viewport})} /> \n                          </div>\n\n                        </MapGL>\n                      </Card.Body>\n                  </Card>\n                  </Col>)}\n              </Row>\n              {/* <Row>\n                <form style={{display:'block',margin: '0 auto'}}>\n                  <button className=\"btn btn-lg btn-success\" type=\"submit\" onSubmit={this.handleSubmit}  value=\"refresh users\">Refresh Users</button>\n                </form>\n              </Row> */}\n            </Container>\n            : <Loading message=\"Loading...\" />}\n           \n        </div>\n      );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}