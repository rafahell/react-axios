{"version":3,"sources":["Loading.js","App.js","serviceWorker.js","index.js"],"names":["Loading","_ref","message","react_default","a","createElement","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","users","isLoaded","searchTerm","handleSubmit","bind","assertThisInitialized","searchValue","_this2","axios","then","response","setState","concat","toConsumableArray","data","results","e","preventDefault","getUsers","console","log","target","value","_this$state","className","Container","Row","Col","xs","md","Card","Body","type","placeholder","onChange","filter","item","name","first","toLowerCase","includes","isSearched","map","user","sm","key","id","Img","variant","src","picture","large","Title","Text","cell","email","location","city","style","display","margin","onSubmit","src_Loading","Component","Boolean","window","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1946bda3.chunk.js","sourcesContent":["import React from 'react';\n\nconst Loading = ({message}) => <h2>{message}</h2>\n\nexport default Loading;","import React, { Component } from 'react';\nimport {Card, Container, Row, Col} from 'react-bootstrap';\nimport axios from 'axios';\nimport Loading from './Loading';\nimport './App.css';\n\nfunction isSearched(searchTerm) {\n  return function(item) {\n    return !searchTerm || item.name.first.toLowerCase().includes(searchTerm.toLowerCase());\n  }\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    \n    this.state = {\n      users: [],\n      isLoaded: false,\n      searchTerm: ''\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.searchValue = this.searchValue.bind(this);\n  }\n  \n  //fetch api axios\n  getUsers() {\n    axios('https://api.randomuser.me/?nat=US&results=6')\n    .then(response => this.setState({\n      users: [...this.state.users, ...response.data.results],\n      isLoaded: true\n    }))\n\n    this.setState({\n      isLoaded: false\n    })\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n    this.getUsers();\n    console.log('more users')\n  }\n\n  componentWillMount() {\n   this.getUsers(); \n  }\n\n  searchValue (e) {\n    this.setState ({searchTerm: e.target.value})\n  }\n\n  render() {\n    const {isLoaded, users, searchTerm} = this.state;\n\n      return (\n        <div className=\"App\">\n        \n        <Container>\n          <Row className=\"justify-content-center\">\n            <Col xs={12} md={12}>\n              <form className=\"card card-sm\">\n              <Card>\n                  <Card.Body className=\" row no-gutters align-items-center\">\n                        <Col md=\"auto\">\n                            <i className=\"fas fa-search h4 text-body\"></i>\n                        </Col>\n                        <Col>\n                          <input className=\"form-control form-control-lg form-control-borderless\" type=\"search\" placeholder=\"Search\" onChange={this.searchValue} />\n                        </Col>\n                  </Card.Body>\n                </Card>\n              </form>\n            </Col>\n        </Row>\n      </Container>\n              \n\n          {isLoaded ?\n            <Container>\n              <Row>\n                {users.filter(isSearched(searchTerm)).map(user => \n                  <Col xs={12} sm={12} md={4} key={user.id.value}>\n                  <Card>\n                    <Card.Img variant=\"top\" src={user.picture.large} />\n                    <Card.Body>\n                      <Card.Title>{user.name.first}</Card.Title>\n                      <Card.Text>\n                      <i className=\"fas fa-phone\"></i> {user.cell} <br/>\n                       <i className=\"far fa-envelope\"></i> <span className=\"small\">{user.email}</span><br/>\n                       <i className=\"fas fa-map-marker-alt\"></i><span className=\"city\"> {user.location.city}</span>\n                      </Card.Text>\n                    </Card.Body>\n                  </Card>\n                  </Col>)}\n              </Row>\n              <Row>\n                <form style={{display:'block',margin: '0 auto'}}>\n                  <button className=\"btn btn-lg btn-success\" type=\"submit\" onSubmit={this.handleSubmit}  value=\"refresh users\">Refresh Users</button>\n                </form>\n              </Row>\n            </Container>\n            : <Loading message=\"Loading...\" />}\n           \n        </div>\n      );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}